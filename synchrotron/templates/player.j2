{% extends "base.j2" %}

{% block css_head %}
{{ super() }}

<style>

.clickable
{
	cursor: pointer;
}

</style>

{% endblock %}

{% block js_head %}
{{ super() }}
<script src="https://www.youtube.com/iframe_api"></script>
{% endblock %}


{% block js_body %}
{{ super() }}

<script type="text/javascript">
room_id = "{{ room_id }}"

/////////////////////////
//// WEBSOCKET STUFF ////
/////////////////////////

var ws;

// Stringifies the given object and sends it to the server.
function sendAction(data)
{
	var msg = JSON.stringify(data);
	console.log("Sending action: " + msg);
	ws.send(msg);
}

function initWebSocket()
{
	if (!window.WebSocket)
	{
		if (window.MozWebSocket)
		{
			window.WebSocket = window.MozWebSocket;
		}
		else
		{
			alert("Your browser doesn't support WebSockets.");
		}
	}

	ws = new WebSocket('{{ wsapi_url }}');

	ws.onopen = function(evt)
	{
		
	}

	ws.onmessage = function(evt)
	{
		console.log("Message from server: " + evt.data);

		var data;
		var action;

		try
		{
			data = JSON.parse(evt.data);
			action = data.action;
		}
		catch (SyntaxError) { }

		if (action === undefined)
		{
			alert("Server sent invalid message. Not good.");
			console.log("Server sent invalid message:");
			console.log(evt.data);
			ws.close();
		}

		var actionFunc = actions[action]
		if (actionFunc === undefined)
		{
			console.log("Server sent unknown action '" + actionFunc + "'. Ignoring.");
		}
		else
		{
			actionFunc(data, ws);
		}
	}

	ws.onclose = function(evt)
	{
		console.log("WebSocket closed.");
	}
}

function onYouTubeIframeAPIReady()
{
	// Set up UI.
	$("#videoform").submit(function()
	{
		var videoId = $("input#video_id").val();
		console.log("Changing video to " + videoId);
		sendAction({ action: "addvideo", video_id: videoId });
		return false;
	});


	// Set up player
	var lastState = -2;
	vplayer = new YT.Player("player", {
		width: "640",
		height: "380",
		videoId: "",
		playerVars: { enablejsapi: 1 },
		events: {
			onStateChange: function(event)
			{
				// if (event.data == YT.PlayerState.PLAYING && lastState != YT.PlayerState.PLAYING)
				// {
				// 	console.log("Sending play action...");
				// 	sendAction({ action: "play", time: vplayer.getCurrentTime() });
				// }
				// else if (event.data == YT.PlayerState.PAUSED && lastState != YT.PlayerState.PAUSED)
				// {
				// 	console.log("Sending pause action... ");
				// 	sendAction({ action: "pause", });
				// }

				// This breaks.
				// updateState(event.data);

				// When we finish buffering, we should sync.
				if (event.data != YT.PlayerState.BUFFERING && lastState == YT.PlayerState.BUFFERING)
				{
					console.log("Video stopped buffering. Requesting sync...");
					sendAction({ action: "sync", });
				}

				lastState = event.data;
			},

			onReady: function(event)
			{
				console.log("Requesting init...");
				sendAction({ action: "init", room_id: room_id });

				// Update player controls
				updateStateTimeout();
			},
		}
	});

	function updatePlayerControls()
	{

	}

	initWebSocket();
};



//////////////////////
//// PLAYER LOGIC ////
//////////////////////

/////////////
// ACTIONS //
/////////////

function sendPlay()
{
	sendAction({ action: "play" });
}

function sendSeek(time)
{
	sendAction({ action: "seek", time: time });
}

function sendPause()
{
	sendAction({ action: "pause" });
}


// Whether or not the video should be playing.
var is_playing = false;

// Whether or not the video should be set to playing on the next updateState().
var set_new_is_playing = false;
var new_is_playing = is_playing;

var set_new_current_time = false;
var new_current_time = -1;

// The time the video was last paused at.
// When the user plays the video, if this differs from the video's current time, a seek is done.
var time_paused = -1;


function changePlaying(playing)
{
	new_is_playing = playing;
	set_new_is_playing = true;
}

function changeCurrentTime(time)
{
	new_current_time = time;
	set_new_current_time = true;
}


// Sets is_playing and plays or pauses the video.
function setPlaying(playing)
{
	state_changing = true;
	if (typeof playing !== "undefined")
		is_playing = playing;

	if (is_playing)
	{
		console.log("Playing");
		vplayer.playVideo();
	}
	else
	{
		console.log("Pausing");
		vplayer.pauseVideo();
		time_paused = vplayer.getCurrentTime();
	}
}

// Checks if is_playing differs from whether or not the video is playing.
// If the video is playing and is_playing is false, assumes the user has played the video.
// The opposite is true for pausing.
function updateState(state)
{
	if (typeof state === "undefined") state = vplayer.getPlayerState();

	if (set_new_is_playing)
	{
		console.log("Script changed is playing to " + new_is_playing);
		setPlaying(new_is_playing);
		set_new_is_playing = false;
	}
	else if (set_new_current_time)
	{
		console.log("Script seeked to " + new_current_time);
		vplayer.seekTo(new_current_time);
		time_current = new_current_time;
		set_new_current_time = false;
	}
	else if (is_playing && state == YT.PlayerState.PAUSED)
	{
		// The state changed, assume the user paused.
		setPlaying(false);

		console.log("Sending pause");
		sendPause();
	}
	else if (!is_playing && state == YT.PlayerState.PLAYING)
	{
		// The state changed, assume the user played.
		setPlaying(true);

		// Figure out if we need to do a seek.
		// If the current time and the time paused are more than a few seconds apart, seek.
		var time_current = vplayer.getCurrentTime();
		var pause_current_diff = Math.abs(time_paused - time_current);
		console.log("Pause time and current time are " + pause_current_diff + " seconds apart.");
		if (pause_current_diff > 3)
		{
			// Seek
			console.log("Sending seek");
			sendSeek(time_current);
		}

		console.log("Sending play");
		sendPlay();
	}
}

function updateStateTimeout()
{
	updateState();
	setTimeout(updateStateTimeout, 100);
}


////////////////////////////
//// VIDEO PLAYER STUFF ////
////////////////////////////

actions = 
{
	error: function(data, sock)
	{
		console.log(JSON.stringify(data));
		alert(data.reason_msg);
	},

	// Handles the init action sent from the server.
	// Expects the following fields in data: video_id
	// Doesn't return anything.
	setvideo: function(data, sock)
	{
		vplayer.loadVideoById(data.video_id);
		console.log("Requesting sync...");
		sendAction({ action: "sync", });

		// Request sync again in a bit to make sure the video is properly synchronized.
		setTimeout(function()
		{
			console.log("Requesting sync...");
			sendAction({ action: "sync", });
		}, (1*1000));
	},

	// Handles the sync action sent from the server.
	// Expects the following fields: video_time
	sync: function(data, sock)
	{
		changePlaying(data.is_playing);
		changeCurrentTime(data.video_time);
	},

	playlistupdate: function (data, sock)
	{
		$("#playlist").html("");
		data.playlist.forEach(function(vid, index)
		{
			// There's probably a better way to do this.
			var itemElement = $("#playlist").append('<li class="media clickable" id="plistclick-' + index + '">\
				<a id="plistanchor-' + index + '" class="pull-left">\
				<img class="media-object" src="http://i.ytimg.com/vi/' + vid + '/default.jpg">\
				</a>\
				<div id="plist-' + index + '" class="media-body">\
					<h4 class="media-heading">Loading...</h4>\
					Loading video info, please wait.\
				</div></a></li>');

			$.ajax({
				url: "http://gdata.youtube.com/feeds/api/videos/" + vid + "?v=2&alt=json",
				dataType: "json",
				success: function(data)
				{
					var title = data.entry.title.$t;
					$("#plist-" + index).html('<h4 class="media-heading">' + title + '</h4>');
				},
			})

			$("#plistclick-" + index).click(function(evt)
			{
				console.log("Changing current video to index " + index);
				sendAction({ action: "changevideo", index: index });
			});
		});
	},
}

</script>

{% endblock %}



{% block content %}

<div id="player-div">
	<div id="player"></div>
</div>

<div class="well">
	<h3>Playlist</h3>
	<hr />
	<ul class="media-list" id="playlist">
	</ul>
</div>


<form name="videoform" id="videoform" action="javascript:void(0);">
	<input type="text" name="video_id" id="video_id" />
	<button type="submit" id="submit" class="btn">Change Video</button>
</form>

{% endblock %}


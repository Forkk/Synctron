{% extends "base.j2" %}

{% block js_head %}
{{ super() }}
<script src="https://www.youtube.com/iframe_api"></script>
<!-- <link href="/static/css/video-js.css" rel="stylesheet">
<script src="/static/js/video.js"></script> -->
{% endblock %}


{% block js_body %}
{{ super() }}

<script type="text/javascript">
room_id = "{{ room_id }}"


/////////////////////
// WEBSOCKET STUFF //
/////////////////////

var ws;

// Stringifies the given object and sends it to the server.
function sendAction(data)
{
	var msg = JSON.stringify(data);
	console.log("Sending action: " + msg);
	ws.send(msg);
}

function initWebSocket()
{
	if (!window.WebSocket)
	{
		if (window.MozWebSocket)
		{
			window.WebSocket = window.MozWebSocket;
		}
		else
		{
			alert("Your browser doesn't support WebSockets.");
		}
	}

	ws = new WebSocket('{{ wsapi_url }}');

	ws.onopen = function(evt)
	{
		
	}

	ws.onmessage = function(evt)
	{
		console.log("Message from server: " + evt.data);

		var data;
		var action;

		try
		{
			data = JSON.parse(evt.data);
			action = data.action;
		}
		catch (SyntaxError) { }

		if (action === undefined)
		{
			alert("Server sent invalid message. Not good.");
			console.log("Server sent invalid message:");
			console.log(evt.data);
			ws.close();
		}

		var actionFunc = actions[action]
		if (actionFunc === undefined)
		{
			console.log("Server sent unknown action '" + actionFunc + "'. Ignoring.");
		}
		else
		{
			actionFunc(data, ws);
		}
	}

	ws.onclose = function(evt)
	{
		console.log("WebSocket closed.");
	}
}

function onYouTubeIframeAPIReady()
{
	// Set up UI.
	$("#videoform").submit(function()
	{
		var videoId = $("input#video_id").val();
		console.log("Changing video to " + videoId);
		sendAction({ action: "changevideo", room_id: room_id, video_id: videoId });
		return false;
	});


	// Set up player
	var lastState = -2;
	vplayer = new YT.Player("player", {
		width: "640",
		height: "380",
		videoId: "",
		events: {
			onStateChange: function(event)
			{
				if (event.data == YT.PlayerState.PLAYING && lastState != YT.PlayerState.PLAYING)
				{
					console.log("Sending play action...");
					sendAction({ action: "play", room_id: room_id, time: vplayer.getCurrentTime() });
				}
				else if (event.data == YT.PlayerState.PAUSED && lastState != YT.PlayerState.PAUSED)
				{
					console.log("Sending pause action... ");
					sendAction({ action: "pause", room_id: room_id });
				}

				// When we finish buffering, we should sync.
				if (event.data != YT.PlayerState.BUFFERING && lastState == YT.PlayerState.BUFFERING)
				{
					console.log("Video stopped buffering. Requesting sync...");
					sendAction({ action: "sync", room_id: room_id });
				}

				lastState = event.data;
			},

			onReady: function(event)
			{
				console.log("Requesting init...");
				sendAction({ action: "init", room_id: room_id });
			},
		}
	});

	initWebSocket();
};


////////////////////////
// VIDEO PLAYER STUFF //
////////////////////////

actions = 
{
	error: function(data, sock)
	{
		console.log(JSON.stringify(data));
		alert(data.reason_msg);
	},

	// Handles the init action sent from the server.
	// Expects the following fields in data: video_id
	// Doesn't return anything.
	setvideo: function(data, sock)
	{
		vplayer.loadVideoById(data.video_id);
		console.log("Requesting sync...");
		sendAction({ action: "sync", room_id: room_id });

		// Request sync again in a bit to make sure the video is properly synchronized.
		setTimeout(function()
		{
			console.log("Requesting sync...");
			sendAction({ action: "sync", room_id: room_id });
		}, (1*1000));
	},

	// Handles the sync action sent from the server.
	// Expects the following fields: video_time
	sync: function(data, sock)
	{
		vplayer.seekTo(data.video_time);

		if (data.is_playing)
		{
			vplayer.playVideo();
		}
		else
		{
			vplayer.pauseVideo();
		}
	}
}

</script>

{% endblock %}



{% block content %}

<div id="player">
	
</div>

<form name="videoform" id="videoform" action="javascript:void(0);">
	<input type="text" name="video_id" id="video_id" />
	<button type="submit" id="submit" class="btn">Change Video</button>
</form>

{% endblock %}


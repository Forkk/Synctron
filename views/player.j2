{% extends "base.j2" %}

{% block js_head %}
{{ super() }}
<script src="https://www.youtube.com/iframe_api"></script>
<!-- <link href="/static/css/video-js.css" rel="stylesheet">
<script src="/static/js/video.js"></script> -->
{% endblock %}


{% block js_body %}
{{ super() }}

<script type="text/javascript">
room_id = "{{ room_id }}"


/////////////////////
// WEBSOCKET STUFF //
/////////////////////

$(document).ready(function()
{
	if (!window.WebSocket)
	{
		if (window.MozWebSocket)
		{
			window.WebSocket = window.MozWebSocket;
		}
		else
		{
			alert("Your browser doesn't support WebSockets.");
		}
	}


	ws = new WebSocket('ws://127.0.0.1:8000/wsapi');

	ws.onopen = function(evt)
	{
		ws.send(JSON.stringify({
			action: "init",
			room_id: room_id,
		}));
	}

	ws.onmessage = function(evt)
	{
		console.log("Message from server: " + evt.data);

		var data;
		var action;

		try
		{
			data = JSON.parse(evt.data);
			action = data.action;
		}
		catch (SyntaxError) { }

		if (action === undefined)
		{
			alert("Server sent invalid message. Not good.");
			console.log("Server sent invalid message:");
			console.log(evt.data);
			ws.close();
		}

		var actionFunc = actions[action]
		if (actionFunc === undefined)
		{
			console.log("Server sent unknown action '" + actionFunc + "'. Ignoring.");
		}
		else
		{
			actionFunc(data, ws);
		}
	}

	ws.onclose = function(evt)
	{
		console.log("WebSocket closed.");
	}

	$('#send').submit(function()
	{
		ws.send($('input:first').val());
		$('input:first').val('').focus();
		return false;
	});
});



////////////////////////
// VIDEO PLAYER STUFF //
////////////////////////

var ignorePlayPause = false;

actions = 
{
	error: function(data, sock)
	{
		console.log(JSON.stringify(data));
		alert(data.reason_msg);
	},

	// Handles the init action sent from the server.
	// Expects the following fields in data: video_id
	// Doesn't return anything.
	setvideo: function(data, sock)
	{
		var lastState = -2;

		vplayer = new YT.Player("player", {
			width: "640",
			height: "380",
			videoId: data.video_id,
			events: {
				onStateChange: function(event)
				{
					if (event.data == YT.PlayerState.PLAYING && lastState != YT.PlayerState.PLAYING)
					{
						console.log("Sending play action...");
						ws.send(JSON.stringify({ action: "play", room_id: room_id }));
					}
					else if (event.data == YT.PlayerState.PAUSED && lastState != YT.PlayerState.PAUSED)
					{
						console.log("Sending pause action... ");
						ws.send(JSON.stringify({ action: "pause", room_id: room_id }));
					}

					lastState = event.data;
				},

				onReady: function(event)
				{
					console.log("Requesting sync...");
					ws.send(JSON.stringify({ action: "sync", room_id: room_id }));
				},
			}
		});

		// Send sync again ten seconds later to ensure that we're truly synced-up.
		// setTimeout(function()
		// {
		// 	ws.send(JSON.stringify({ action: "sync", room_id: room_id }));
		// }, (10*1000));
	},

	// Handles the sync action sent from the server.
	// Expects the following fields: video_time
	sync: function(data, sock)
	{
		vplayer.seekTo(data.video_time);
		
		if (data.is_playing)
		{
			vplayer.playVideo();
		}
		else
		{
			vplayer.pauseVideo();
		}
	}
}

</script>

{% endblock %}



{% block content %}

<div id="player">
	
</div>

{% endblock %}

